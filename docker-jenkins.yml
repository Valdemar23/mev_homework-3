# docker-jenkins.yml
---
- hosts: aws-instances
  become: yes
  vars:
          pas: "{{ password }}"
  # user: jackiechan
  # become_method: sudo

  tasks:
    - name: Install docker using apt manager
      become: yes
      become_user: root
      # apt: name={{ item }} # Стиль вызова модулей должен быть одинаковым в рамках всего плейбука
      apt:
        name: ['docker.io', 'python-pip', 'curl', 'python3-pip'] # Я бы не ставил Docker из стандартного репозитория т.к. там он будет скорее всего древней версии
        update_cache: yes # Важно обновить кэш, перед тем как что то ставить. 
                          # Т.к. иеющийся кэш может быть уже протухшим или его может не быть вовсе.
        #pip: name=docker

    - name: Install 'docker' pip packege
      pip:
        name: docker
        # become: yes
        # become_user: root
        
    # https://docs.ansible.com/ansible/latest/modules/service_module.html
    - name: Start service, if not started
      # become: yes
      # become_user: root
      service:
        name: docker
        state: started
        enabled: yes


    # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html
    - name: Login into DockerHub
      # become: yes
      # become_user: root
      docker_login:
        username: yourfriendbober # Очень плохая идея хранить так креденшелы
        password: pas
        config_path: /root/.docker/config.json

    # https://docs.ansible.com/ansible/latest/modules/docker_image_module.html
    - name: pull an image
      # become: yes
      # become_user: root
      docker_image:
        name: jenkins/jenkins
        source: pull
          
#https://docs.ansible.com/ansible/latest/modules/docker_container_module.html
    - name: Start container with healthstatus
      become: yes
      become_user: root
      docker_container:
        name: jenkins 
        image: jenkins/jenkins
        state: started
        ports:
          - 8080:8080
          - 50000:50000
        volumes:
          - /home/ubuntu/jenkins:/var/jenkins_home
        healthcheck:
          # Check if nginx server is healthy by curl'ing the server.
          # If this fails or timeouts, the healthcheck fails.
          test: ["CMD", "curl", "--fail", "http://ec2-3-16-68-197.us-east-2.compute.amazonaws.com"]
          interval: 1m30s
          timeout: 10s
          retries: 3
          start_period: 30s
